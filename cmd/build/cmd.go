package build

import (
	"github.com/urfave/cli"
	"jrubin.io/zb/cmd"
	"jrubin.io/zb/lib/buildflags"
	"jrubin.io/zb/lib/project"
)

// TODO(jrubin) build [-i] flag
// TODO(jrubin) run gogenerate
// use directed acyclic graph to build dependencies
// add standard ldflags (git commit (-dirty), build datestamp, etc.
// automatically add missing imports to vendor/
// define deps (like .pb.go) generated by go generate and in turn their deps
// (.proto)

// Cmd is the build command
var Cmd cmd.Constructor = &cc{}

type cc struct {
	*cmd.Config
	BuildFlags     buildflags.BuildFlags
	Context        *project.Context
	Install, Force bool
}

func (cmd *cc) New(_ *cli.App, config *cmd.Config) cli.Command {
	cmd.Config = config

	return cli.Command{
		Name:      "build",
		Usage:     "build all of the executables in each of the projects",
		ArgsUsage: "[-i] [build flags] [packages]",
		Before: func(c *cli.Context) error {
			cmd.setup()
			return nil
		},
		Action: func(c *cli.Context) error {
			return cmd.run(c.Args()...)
		},
		Flags: append(cmd.BuildFlags.Flags(),
			cli.BoolFlag{
				Name:        "i",
				Usage:       "install the packages that are dependencies of the target",
				Destination: &cmd.Install,
			},
			cli.BoolFlag{
				Name:        "f",
				Usage:       "force build even if no dependencies have been updated",
				Destination: &cmd.Force,
			},
		),
	}
}

func (cmd *cc) setup() {
	cmd.Context = &project.Context{
		BuildContext:  cmd.BuildFlags.BuildContext(),
		BuildFlags:    cmd.BuildFlags.Args(),
		SrcDir:        cmd.Cwd,
		Logger:        cmd.Logger,
		ExcludeVendor: false,
	}
}

func (cmd *cc) run(args ...string) error {
	projects, err := cmd.Context.Projects(args...)
	if err != nil {
		return err
	}

	targets, err := projects.Targets()
	if err != nil {
		return err
	}

	var built bool

	for _, target := range targets {
		if cmd.Force {
			if err := target.Build(); err != nil {
				return err
			}
			built = true
			continue
		}

		deps, err := target.Dependencies()
		if err != nil {
			return err
		}

		// build target if any of its dependencies are newer than itself

		mt := target.ModTime()
		for _, d := range deps {
			if d.ModTime().After(mt) {
				cmd.Logger.WithField("name", target.Name()).Info("building")

				if err := target.Build(); err != nil {
					return err
				}

				built = true
				break
			}
		}
	}

	if !built {
		cmd.Logger.Info("nothing to build")
	}

	return nil
}
